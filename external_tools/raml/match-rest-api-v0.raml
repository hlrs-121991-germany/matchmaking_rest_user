#%RAML 1.0
---
title: Matchmaking REST API
version: v0
baseUri: http://127.0.0.1:8000/match-api/{version}
mediaType:  application/json
protocols: [ HTTP, HTTPS ]

uses: 
  custom_type: type/match-rest-api-v0-type.raml

/users:
  get:
    description: |
      Retrive all the users details, or filter it based on the 'user' filter.
    queryParameters:
      user:
        description: Get the user details based on the user filter, 
          and value would be user id (integer) or user name (string). 
          It is an optional filter query parameter. Eg. "1", "dinesh"
        type: string
        required: false
        example: "dinesh"
    responses:
      200:
        body:
          application/json:
            type: custom_type.UserResponse[]
            example: !include sample/user_get_list_200_v0_res.json
      404:
        body:
          application/json:
            type: custom_type.ErrorResponse
            example: !include sample/user_error_response_404_v0.json

  post:
    description: Create a new object in User to represent liked user details
    body:
      application/json:
        type: custom_type.UserRequest
        example: !include sample/user_post_202_v0_req.json
    responses:
      200:
        body:
          application/json:
            type: custom_type.UserResponse
            example: !include sample/user_get_single_200_v0_res.json
      400:
        body:
          application/json:
            type: custom_type.ErrorResponse
            example: !include sample/user_error_response_400_v0.json

  /{id}:
    get:
      description: |
        Retrive specific User details. ID is the URI parameter in string,
        or in integer to match User (Eg. "1", "dinesh").
      responses:
        200:
          body:
            application/json:
              type: custom_type.UserResponse
              example: !include sample/user_get_single_200_v0_res.json
        404:
          body:
            application/json:
              type: custom_type.ErrorResponse
              example: !include sample/user_error_response_404_v0.json

    put:
      description: |
        Update the specific User's username. ID is the URI parameter in string,
        or in integer to match User (Eg. "1", "dinesh").
      body:
        application/json:
          type: custom_type.UserRequest
          example: !include sample/user_post_202_v0_req.json
      responses:
        200:
          body:
            application/json:
              type: custom_type.UserResponse
              example: !include sample/user_get_single_200_v0_res.json
        400:
          body:
            application/json:
              type: custom_type.ErrorResponse
              example: !include sample/user_error_response_400_v0.json
        404:
          body:
            application/json:
              type: custom_type.ErrorResponse
              example: !include sample/user_error_response_404_v0.json

    delete:
      description: |
        Delete the specific User details. If it is successfully deleted,
        then the "204" response message returned without any response body.
        ID is the URI parameter in string, or in integer to match
        User (Eg. "1", "dinesh").
      responses:
        204:
        404:
          body:
            application/json:
              type: custom_type.ErrorResponse
              example: !include sample/user_error_response_404_v0.json

/answers:
  get:
    description: |
      Retrive all the Answers.
    responses:
      200:
        body:
          application/json:
            type: custom_type.AnswerResponse[]
            example: !include sample/answers_get_list_200_v0_res.json
  post:
    description: Create a new Answer.
    body:
      application/json:
        type: custom_type.AnswerRequest
        example: !include sample/answers_get_single_202_v0_req.json
    responses:
      200:
        body:
          application/json:
            type: custom_type.AnswerResponse
            example: !include sample/answers_get_single_202_v0_res.json
      400:
        body:
          application/json:
            type: custom_type.ErrorResponse
            example: !include sample/answer_error_response_400_v0.json

  /{id}:
    get:
      description: |
        Retrive specific Answer. URI parameter is an unique integer value
        to specify Answer ID. ID here means the primary key of Specific object.
      responses:
        200:
          body:
            application/json:
              type: custom_type.AnswerResponse
              example: !include sample/answers_get_single_200_v0_res.json
        404:
          body:
            application/json:
              type: custom_type.ErrorResponse
              example: !include sample/answer_error_response_404_v0.json

    put:
      description: |
        Update the specific Answers completely. URI parameter is an unique integer value
        to specify Answer ID. ID here means the primary key of Specific object.
      body:
        application/json:
          type: custom_type.AnswerRequest
          example: !include sample/answers_put_single_202_v0_req.json
      responses:
        200:
          body:
            application/json:
              type: custom_type.AnswerResponse
              example: !include sample/answers_get_single_202_v0_res.json
        404:
          body:
            application/json:
              type: custom_type.ErrorResponse
              example: !include sample/answer_error_response_404_v0.json
        400:
          body:
            application/json:
              type: custom_type.ErrorResponse
              example: !include sample/answer_error_response_400_v0.json

    delete:
      description: |
        Delete the specific Answer. If it is successfully deleted, then the
        "204" response message returned without any response body. URI 
        parameter is an unique integer value to specify Answer ID. ID here 
        means the primary key of Specific object.
      responses:
        204:
        404:
          body:
            application/json:
              type: custom_type.ErrorResponse
              example: !include sample/answer_error_response_404_v0.json

/questions:
  get:
    description: |
      Retrive all the Questions and its Answers.
    responses:
      200:
        body:
          application/json:
            type: custom_type.QuestionResponse[]
            example: !include sample/questions_get_list_200_v0_res.json
  post:
    description: |
      Create a new Question with the valid request data. Request data will
      reference answer-id in the "answers" attribute, so Answers (/answers)
      should be created before referencing.
    body:
      application/json:
        type: custom_type.QuestionRequest
        example: !include sample/questions_get_single_202_v0_req.json
    responses:
      200:
        body:
          application/json:
            type: custom_type.QuestionResponse
            example: !include sample/questions_get_single_202_v0_res.json
      400:
        body:
          application/json:
            type: custom_type.ErrorResponse
            example: !include sample/question_error_response_400_v0.json

  /{id}:
    get:
      description: |
        Retrive specific Question. Specific question will be identified by
        using URI parameter. URI parameter (ID) is an integer value to specify
        Question's Identity. ID here means the primary key of Specific object.
      responses:
        200:
          body:
            application/json:
              type: custom_type.QuestionResponse
              example: !include sample/questions_get_single_200_v0_res.json
        404:
          body:
            application/json:
              type: custom_type.ErrorResponse
              example: !include sample/question_error_response_404_v0.json

    put:
      description: |
        Update the specific Question details partially or completely. 
        'ans-add', 'ans-remove' is the list of answer id in 'string' format
        (Eg. "1,3,4,5,7").
        Specific question will be identified by
        using URI parameter. URI parameter (ID) is an integer value to specify
        Question's Identity.
        ID here means the primary key of Specific object. Request data will
        reference answer-id in the "ans-add, ans-remove" attribute, so Answers
        (/answers) should be created before referencing.
      body:
        application/json:
          type: custom_type.QuestionRequestPut
          example: !include sample/questions_put_single_202_v0_req.json
      responses:
        200:
          body:
            application/json:
              type: custom_type.QuestionResponse
              example: !include sample/questions_get_single_202_v0_res.json
        404:
          body:
            application/json:
              type: custom_type.ErrorResponse
              example: !include sample/question_error_response_404_v0.json
        400:
          body:
            application/json:
              type: custom_type.ErrorResponse
              example: !include sample/question_error_response_400_v0.json

    delete:
      description: |
        Delete the specific Questions by specifying question ID in the
        URI parameter. If it is successfully deleted, then the "204" response
        message returned without any response body.
        ID here means the primary key of Specific object.
      responses:
        204:
        404:
          body:
            application/json:
              type: custom_type.ErrorResponse
              example: !include sample/question_error_response_404_v0.json

/user-answers:
  get:
    description: |
      Retrive all the users' answer details, or filter it by using the
      "user" query parameter.
    queryParameters:
      user:
        description: |
          Get the answer based on "user" filter, and value would be user id 
          (integer) or user name (string). It is an optional filter query
          parameter (Eg. "1", "dinesh")
        type: string
        required: false
        example: "dinesh"
    responses:
      200:
        body:
          application/json:
            type: custom_type.UserAnswerResponse[]
            example: !include sample/user_answers_get_list_200_v0_res.json
  post:
    description: |
      Create a new user's answer. This will reference question-id and
      answer-id, so Questions and Answers should be created before this. 
      ID here means the primary key of Specific object.
    body:
      application/json:
        type: custom_type.UserAnswerRequest
        example: !include sample/user_answers_get_single_202_v0_req.json
    responses:
      200:
        body:
          application/json:
            type: custom_type.UserAnswerResponse
            example: !include sample/user_answers_get_single_202_v0_res.json
      400:
        body:
          application/json:
            type: custom_type.ErrorResponse
            example: !include sample/user_answer_error_response_400_v0.json

  /{id}:
    get:
      description: |
        Retrive specific User Answer. ID is the URI parameter, and the value
        is the primary key of Specific object.  ID value is a string, or 
        an integer to match Username or userid (Eg. "1", "dinesh").
      responses:
        200:
          body:
            application/json:
              type: custom_type.UserAnswerResponse
              example: !include sample/user_answers_get_single_200_v0_res.json
        404:
          body:
            application/json:
              type: custom_type.ErrorResponse
              example: !include sample/user_answer_error_response_404_v0.json

    put:
      description: |
        Update the Answer completely. ID is the URI parameter, and the value
        is the primary key of Specific object.  ID value is a string, or 
        an integer to match Username or userid (Eg. "1", "dinesh").
        This will reference question-id and answer-id, so Questions and Answers
        should be created before this. ID here means the primary key of
        Specific object.
      body:
        application/json:
          type: custom_type.UserAnswerRequest
          example: !include sample/user_answers_put_single_202_v0_req.json
      responses:
        200:
          body:
            application/json:
              type: custom_type.UserAnswerResponse
              example: !include sample/user_answers_get_single_202_v0_res.json
        404:
          body:
            application/json:
              type: custom_type.ErrorResponse
              example: !include sample/user_answer_error_response_404_v0.json
        400:
          body:
            application/json:
              type: custom_type.ErrorResponse
              example: !include sample/user_answer_error_response_400_v0.json

    delete:
      description: |
        Delete the specific User Answer. If it is successfully deleted, then
        the "204" response message returned without any response body. ID is
        the URI parameter, and the value is an unique integer of
        Specific object. ID value is a string, or an integer to match 
        Username or userid (Eg. "1", "dinesh").
      responses:
        204:
        404:
          body:
            application/json:
              type: custom_type.ErrorResponse
              example: !include sample/user_answer_error_response_404_v0.json

/matches:
  get:
    description: |
      Retrive all the matches, or filter it based on the 'user' filter.
      Matchmaking details of specific pair of users retrived by providing 'user'
      query parameter multiple times (Eg. ?user=value1&user=value2").
    queryParameters:
      user:
        description: |
          Get the matches based on the first "user" filter (Eg. ?user=<value>), 
          and value would be user id (integer) or user name (string). 
          It would be list of matches by filtering with the value of first user.
          Get the answer based on the multiple "user" filter
          (Eg. ?"user=value1&user=value2"). It would give single match
          element based on the match of both first and second user value.
          It is an optional filter query parameter (Eg. "1", "dinesh").
        type: string
        required: false
        example: "dinesh"
    responses:
      200:
        body:
          application/json:
            type: custom_type.MatchResponse[]
            example: !include sample/matches_get_list_200_v0_resp.json
      404:
        body:
          application/json:
            type: custom_type.ErrorResponse
            example: !include sample/matches_error_response_404_v0.json
  /{id}:
    get:
      description: |
        Retrive specific Match. ID is the unique integer to identify Matches.
      responses:
        200:
          body:
            application/json:
              type: custom_type.MatchResponse
              example: !include sample/match_get_single_200_v0_resp.json
        404:
          body:
            application/json:
              type: custom_type.ErrorResponse
              example: !include sample/match_error_response_404_v0.json

/user-likes:
  get:
    description: |
      Retrive all the liked users details, or filter it based on the 
      'user' filter.
    queryParameters:
      user:
        description: Get the user-likes based on the user filter, 
          and value would be user id (integer) or user name (string). 
          It is an optional filter query parameter (Eg. "1", "dinesh").
        type: string
        required: false
        example: "dinesh"

    responses:
      200:
        body:
          application/json:
            type: custom_type.UserLikeResponse[]
            example: !include sample/user_likes_get_list_200_v0_res.json
      404:
        body:
          application/json:
            type: custom_type.ErrorResponse
            example: !include sample/user_likes_error_response_404_v0.json

  post:
    description: |
      Create a new object in UserLikes to create liked user details.
      Request data will reference user-id in the "user, liked_users" attribute,
      so Users (/users) should be created before referencing.
    body:
      application/json:
        type: custom_type.UserLikePostRequest
        example: !include sample/user_likes_post_202_v0_req.json
    responses:
      200:
        body:
          application/json:
            type: custom_type.UserLikeResponse
            example: !include sample/user_like_get_single_200_v0_res.json
      404:
        body:
          application/json:
            type: custom_type.ErrorResponse
            example: !include sample/user_likes_error_response_404_v0.json
      400:
        body:
          application/json:
            type: custom_type.ErrorResponse
            example: !include sample/user_likes_error_response_400_v0.json

  /{id}:
    get:
      description: |
        Retrive specific User Likes details. ID is the URI parameter in string, or 
        in integer to match Username or userid (Eg. "1", "dinesh").
      responses:
        200:
          body:
            application/json:
              type: custom_type.UserLikeResponse
              example: !include sample/user_like_get_single_200_v0_res.json
        404:
          body:
            application/json:
              type: custom_type.ErrorResponse
              example: !include sample/user_like_error_response_404_v0.json

    put:
      description: |
        Update the User Likes by adding and removing liked users. "add" and
        "remove" is the string to represent list of users (e.g "3,5,6").
        Request data will reference user-id in the "user, liked_users" attribute,
        so Users (/users) should be created before referencing.
      body:
        application/json:
          type: custom_type.UserLikeRequestPut
          example: !include sample/user_likes_put_single_202_v0_req.json
      responses:
        200:
          body:
            application/json:
              type: custom_type.UserLikeResponse
              example: !include sample/user_like_get_single_202_v0_res.json
        400:
          body:
            application/json:
              type: custom_type.ErrorResponse
              example: !include sample/user_likes_put_error_response_400_v0.json
        404:
          body:
            application/json:
              type: custom_type.ErrorResponse
              example: !include sample/user_like_error_response_404_v0.json

    delete:
      description: |
        Delete the specific 'User Like' details. ID is the URI parameter in
        string, or in integer to match Username or userid (Eg. "1", "dinesh").
        If it is successfully deleted, then the "204" response message
        returned without any response body.
      responses:
        204:
        404:
          body:
            application/json:
              type: custom_type.ErrorResponse
              example: !include sample/user_like_error_response_404_v0.json
